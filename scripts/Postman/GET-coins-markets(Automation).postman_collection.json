{
	"info": {
		"_postman_id": "a4206fee-4ec7-4773-9c26-707aa60167e2",
		"name": "GET /coins/markets (Automation)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1245945"
	},
	"item": [
		{
			"name": "GET /coins/markets - TC101 - Verify successful response with valid parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response contains valid market data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    for (var i = 0; i < jsonData.length; i++) {",
							"        pm.expect(jsonData[i]).to.have.property('id');",
							"        pm.expect(jsonData[i].market_cap_rank).to.be.a('number');",
							"        pm.expect(jsonData[i]).to.have.property('symbol');",
							"        pm.expect(jsonData[i]).to.have.property('name');",
							"        pm.expect(jsonData[i]).to.have.property('current_price');",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/coins/markets?vs_currency=usd",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"coins",
						"markets"
					],
					"query": [
						{
							"key": "vs_currency",
							"value": "usd"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /coins/markets - TC102 - Verify response with invalid currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response should be empty or return an error\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.eql('invalid vs_currency');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/coins/markets?vs_currency=invalid_currency",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"coins",
						"markets"
					],
					"query": [
						{
							"key": "vs_currency",
							"value": "invalid_currency"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /coins/markets - TC103 - Verify response with specific coins",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response contains valid market data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData.length == 2).to.be.true;",
							"    // bitcoin",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id).to.be.eq('bitcoin');",
							"    pm.expect(jsonData[0]).to.have.property('symbol');",
							"    pm.expect(jsonData[0].symbol).to.be.eq('btc');",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0].name).to.be.eq('Bitcoin');",
							"    // ethereum",
							"    pm.expect(jsonData[1]).to.have.property('id');",
							"    pm.expect(jsonData[1].id).to.be.eq('ethereum');",
							"    pm.expect(jsonData[1]).to.have.property('symbol');",
							"    pm.expect(jsonData[1].symbol).to.be.eq('eth');",
							"    pm.expect(jsonData[1]).to.have.property('name');",
							"    pm.expect(jsonData[1].name).to.be.eq('Ethereum');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/coins/markets?ids=bitcoin,ethereum&vs_currency=usd",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"coins",
						"markets"
					],
					"query": [
						{
							"key": "ids",
							"value": "bitcoin,ethereum"
						},
						{
							"key": "vs_currency",
							"value": "usd"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /coins/markets - TC104 - Verify response when requesting an invalid coin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.be.empty;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/coins/markets?ids=invalidcoin&vs_currency=usd",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"coins",
						"markets"
					],
					"query": [
						{
							"key": "ids",
							"value": "invalidcoin"
						},
						{
							"key": "vs_currency",
							"value": "usd"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /coins/markets - TC105 - Verify response when omitting required parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return an error or empty response\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Validate error message from ids\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.eql('Missing parameter vs_currency');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/coins/markets",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"coins",
						"markets"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /coins/markets - TC106 - Verify optional parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains valid market data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData.length == 10).to.be.true;",
							"    for (var i = 0; i < jsonData.length; i++) {",
							"        pm.expect(jsonData[i]).to.have.property('id');",
							"        pm.expect(jsonData[i]).to.have.property('symbol');",
							"        pm.expect(jsonData[i]).to.have.property('name');",
							"        pm.expect(jsonData[i].market_cap_rank).to.be.gte(10);",
							"        pm.expect(jsonData[i]).to.have.property('current_price');",
							"        pm.expect(jsonData[i]).to.have.property('sparkline_in_7d');",
							"        pm.expect(jsonData[i].sparkline_in_7d).to.have.property('price');",
							"        pm.expect(jsonData[i].sparkline_in_7d.price).to.be.an('array');",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=2&sparkline=true",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"coins",
						"markets"
					],
					"query": [
						{
							"key": "vs_currency",
							"value": "usd"
						},
						{
							"key": "order",
							"value": "market_cap_desc"
						},
						{
							"key": "per_page",
							"value": "10"
						},
						{
							"key": "page",
							"value": "2"
						},
						{
							"key": "sparkline",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /coins/markets - TC107 - Verify response pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response contains valid market data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    if (jsonData.length > 0) {",
							"        pm.expect(jsonData[0]).to.have.property('id');",
							"        // second page starting from 51",
							"        pm.expect(jsonData[0].market_cap_rank).to.be.gte(50);",
							"        pm.expect(jsonData[0].market_cap_rank).to.be.a('number');",
							"        pm.expect(jsonData[0]).to.have.property('symbol');",
							"        pm.expect(jsonData[0]).to.have.property('name');",
							"        pm.expect(jsonData[0]).to.have.property('current_price');",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/coins/markets?vs_currency=usd&per_page=50&page=2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"coins",
						"markets"
					],
					"query": [
						{
							"key": "vs_currency",
							"value": "usd"
						},
						{
							"key": "per_page",
							"value": "50"
						},
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /coins/markets - TC108 - Verify response when requesting an excessively high page number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.be.empty;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/coins/markets?vs_currency=usd&per_page=50&page=99999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"coins",
						"markets"
					],
					"query": [
						{
							"key": "vs_currency",
							"value": "usd"
						},
						{
							"key": "per_page",
							"value": "50"
						},
						{
							"key": "page",
							"value": "99999"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{api_key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-cg-demo-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}